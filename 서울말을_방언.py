# -*- coding: utf-8 -*-
"""추천(방언) - 서울말을 방언.ipynb의 사본

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pe8HANX4KPI3BBdvtgEYsDHdPndUX9H1
"""

import matplotlib.pyplot as plt
import numpy as np
from sentence_transformers import SentenceTransformer
import pandas as pd
import seaborn as sns
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.cluster import KMeans
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.decomposition import PCA

!pip install sentence_transformers

!pip install seaborn

data0 = pd.read_csv("강원.csv")

data1 = pd.read_csv("경상.csv", encoding = "euc-kr")

data2 = pd.read_csv("전라.csv")

data3 = pd.read_csv("제주.csv")

data4 = pd.read_csv("충청.csv")

data0

data3

data3['jeju']

data3['jeju'] = data3['jeju'].apply(str)

data3['seoul'] = data3['seoul'].apply(str)

data3.loc[0] = [0, "겅 허게마씸", "그렇게 해요"]

data3

X = np.array(data3.seoul)

text_data = X
model = SentenceTransformer('distilbert-base-nli-mean-tokens')
embeddings = model.encode(text_data, show_progress_bar=True)

embed_data = embeddings

X = np.array(embed_data)
n_comp = 5
pca = PCA(n_components=n_comp)
pca.fit(X)
pca_data = pd.DataFrame(pca.transform(X))
pca_data.head()

##jeju
cos_sim_data = pd.DataFrame(cosine_similarity(X))
def give_recommendations(index,print_recommendation = False,print_recommendation_plots= False,print_genres =False):
    index_recomm =cos_sim_data.loc[index].sort_values(ascending=False).index.tolist()[1:2]
    dialect =  data3['seoul'].loc[index_recomm].values
    result = {'dialect':dialect,'Index':index_recomm}
    if print_recommendation==True:
        print('입력값으로 받은 서울말: %s \n'%(data3['seoul'].loc[index]))

    if print_recommendation_plots==True:
        print('변환된 서울말:\n %s \n'%(data3['jeju'].loc[index]))
    return result

give_recommendations(0, True)

give_recommendations(0, True, True)

